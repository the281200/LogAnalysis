@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Thông báo hợp đồng";

}
<div id="main">
    <div id="left"></div>
    <div class="container-fluid">

        <div class="row-fluid">
            <div class="span12">

                <div class="card">
                    <div class="card-header font-size-card">
                        Thông báo đến hạn nhận lợi tức/trái tức/lãi.
                    </div>
                    <div class="box-content nopadding card-body" style="padding-right: 35px;">

                        @(Html.Kendo().Grid<BuyAndSellBondViewModel>()
                                .Name("grid")
                                .Columns(columns =>
                                {

                                    columns.Bound("").ClientTemplate("")
                                    .Filterable(false)
                                    @*.HeaderTemplate("<input type='checkbox' class='checked_all' onclick='checkAll(event)' id='chkAll' />")*@
                                    .HtmlAttributes(new { style = "text-align:center;" });
                                    columns.Bound(p => p.Id).Title(Resources.Common.ID).HtmlAttributes(new { style = "text-align:center;" }).Hidden();
                                    columns.Bound(p => p.Count).Title("STT").HtmlAttributes(new { style = "text-align:center;" });
                                    columns.Bound(p => p.CustomerName).Title("Tên KH");
                                    columns.Bound(p => p.ContractCode).Title("Mã HĐ");
                                    columns.Bound(p => p.BondsCode).Title("Mã TP");
                                    columns.Bound(p => p.BondsName).Title("Tên TP");
                                    columns.Bound(p => p.PaymentPeriodsContent).Title("Kỳ nhận lãi");
                                    columns.Bound(p => p.EarningDate).Title("Ngày nhận lãi").Format("{0:dd-MM-yyyy}");
                                    columns.Bound(p => p.AccruedValue).Title("Giá trị").Format("{0:n0} đ");
                                    columns.Bound(p => p.DaysLeft).Title("Số ngày quá hạn");


                                })
                                .Pageable()
                                .Selectable(select => select.Mode(GridSelectionMode.Single))
                                .Sortable()
                                .Filterable()
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Model(model => model.Id(p => p.Id))
                                    .PageSize(20)
                                    .Read(read => read.Action("EarningDueWarning_Read", "ContractWarnings"))
                                    .ServerOperation(false)
                                 )
                                 .Events(events => events.Change("change_handler").DataBinding("binding_handler").DataBound("onDataBound"))
                        )
                    </div>
                </div>

                <a href="/Admin/ContractWarnings" class="btn mt-3 btn-contract-back">Trở lại</a>


            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var rowselected = [];
    var isCheckedAll = false;

    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/ExchangeOfAssets/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/ExchangeOfAssets/edit/" + dataItem.ID);
    }



    function change_handler(e) {
        //rowselected = [];
        //var len = this.select().length;
        //for (i = 0; i < len; i++) {
        //    rowselected.push(this.dataItem(this.select()[i]).RoleId);
        //}
    }

    function binding_handler(e) {
        //rowselected = [];
    }

    function modules_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/ExchangeOfAssets/ModulesMapping/" + dataItem.RoleId);

    }
    function sites_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/ExchangeOfAssets/AdminSitesMapping/" + dataItem.RoleId);
    }
    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/ExchangeOfAssets/delete/" + dataItem.ID);
    }

    $(document).ready(function () {
@*        alert("@ViewBag.total");*@
        $("#btnadd").click(function () {
            opendlg("/admin/ExchangeOfAssets/add");
        });

        $("#btnedit").click(function () {
            var selected = [];
            $('input:checkbox[name=checkedNodes]').each(function () {
                if ($(this).is(':checked')) {
                    selected.push($(this).val());
                }
            });
            if (rowselected.length > 0) {
                opendlg("/admin/ExchangeOfAssets/edit/" + selected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
        $("#btnundo").click(function () {
            opendlg("/admin/ExchangeOfAssets/Undo");
        });

         $("#btndelete").click(function () {
           var dataSource = $("#grid").data("kendoGrid").dataSource.data();
            var models = [];
            if (rowselected.length > 0) {
                for (var i = 0; i < rowselected.length; i++) {
                    for (var j = 0; j < dataSource.length; j++) {
                        var dataItem = dataSource[j];
                        if (dataItem.ID == rowselected[i]) {
                            models.push(dataItem.ID);
                        }
                    }
                }
                var dataSubmit = JSON.stringify(models);

                $.post('@Url.Action("Deletes", "ExchangeOfAssets")', { data: dataSubmit}, function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        show_stack_bottom_right('success', 'Xóa ', 'Xóa thành công.');
                    }
                    else {
                        show_stack_bottom_right('error', 'Xóa ', 'Xóa thất bại.');
                    }
                });
            }
            else {
                alert("Vui lòng chọn để xóa danh mục !");
            }
        });

    });


    function onDataBound(e) {
        $('#grid .k-grid-content').height(screen.height * 0.5);

        $('input[name="checkedNodes"]').each(function () {
            if (rowselected.indexOf(this.value) != -1) {
                $(this).attr('checked', 'checked');
            } else {
                $(this).removeAttr('checked');
            }
        });
    };



    function getDataFilter() {
        var dataSource = $("#grid").data("kendoGrid").dataSource;
        var filters = dataSource.filter();
        var allData = dataSource.data();
        var query = new kendo.data.Query(allData);
        var result = query.filter(filters).data;
        return result;
    }

    function getCheckAll() {
        var dataFilterID = [];
        var dataFilter = getDataFilter();
        var check;
        for (var i = 0; i < dataFilter.length; i++) {
            dataFilterID.push(String(dataFilter[i].RoleId));
        }
        for (var i = 0; i < dataFilterID.length; i++) {
            var index = rowselected.indexOf(dataFilterID[i]);
            if (index != -1) {
                check = true;
            }
            else {
                check = false;
                break;
            }
        }
        return check;
    }

    function childNodeClick(element) {
        var id = element.value;
        if (rowselected.indexOf(id) !== -1) {
            rowselected.splice(rowselected.indexOf(id), 1);
        } else {
            rowselected.push(id);
        }
        isCheckedAll = getCheckAll();
        $('#chkAll').prop('checked', isCheckedAll);
    }

    $(function () {
        $(".k-filter").click(function () {
            setTimeout(function () {
                $(".k-filter-menu .k-button").click(function () {
                    setTimeout(function () {
                        rowselected = [];
                        isCheckedAll = getCheckAll();
                        $('#chkAll').prop('checked', isCheckedAll);
                        $('input[name="checkedNodes"]').each(function () {
                            if (rowselected.indexOf(this.value) != -1) {
                                $(this).attr('checked', 'checked');
                            } else {
                                $(this).removeAttr('checked');
                            }
                        });
                    }, 10)
                })
            }, 100);
        });
    });

    function checkAll(e) {

        var rowItems = getDataFilter();
        isCheckedAll = $(e.target).prop('checked');
        if (isCheckedAll) {
            for (var i = 0; i < rowItems.length; i++) {
                var index = rowselected.indexOf(String(rowItems[i].RoleId));
                if (index == -1) {
                    rowselected.push(String(rowItems[i].RoleId));
                }
            }
        }
        else if (!isCheckedAll) {
            var dataFilterID = [];
            var dataFilter = getDataFilter();
            for (var i = 0; i < dataFilter.length; i++) {
                dataFilterID.push(String(dataFilter[i].RoleId));
            }
            for (var i = 0; i < dataFilterID.length; i++) {
                var index = rowselected.indexOf(dataFilterID[i]);
                if (index != -1) {
                    rowselected.splice(index, 1);
                }
            }
        }

        $('input[name="checkedNodes"]').each(function () {
            $(this).prop('checked', isCheckedAll);
        });
    }

</script>




