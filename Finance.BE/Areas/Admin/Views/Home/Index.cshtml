@model RequestStatusCodeModel
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Tổng quan";
    WebContext db = new WebContext();
    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId);
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId));
}
<script type="text/javascript">
    var rowselected = [];
    var isCheckedAll = false;

    function binding_handler(e) {
    }

   @* function changepassword_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/Customer/changepassword/?userName=" + dataItem.UserName);
    }*@

    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/edit/" + dataItem.ID);
    }

    function modules_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/ModulesMapping/" + dataItem.ID);

    }

    function sites_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/AdminSitesMapping/" + dataItem.ID);
    }

    $(document).ready(function () {
        $("#btnadd").click(function () {
            opendlg("/admin/IncurredPurchases/add");
        });
        $("#btnedit").click(function () {
            var selected = [];
            $('input:checkbox[name=checkedNodes]').each(function () {
                if ($(this).is(':checked')) {
                    selected.push($(this).val());
                }
            });
            if (rowselected.length > 0) {
                opendlg("/admin/IncurredPurchases/edit/" + selected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });

        $("#btnundo").click(function () {
            opendlg("/admin/IncurredPurchases/Undo");
        });

        $("#btndelete").click(function () {
           var dataSource = $("#grid").data("kendoGrid").dataSource.data();
            var models = [];
            if (rowselected.length > 0) {
                for (var i = 0; i < rowselected.length; i++) {
                    for (var j = 0; j < dataSource.length; j++) {
                        var dataItem = dataSource[j];
                        if (dataItem.ID == rowselected[i]) {
                            models.push(dataItem.ID);
                        }
                    }
                }
                var dataSubmit = JSON.stringify(models);

                $.post('@Url.Action("Deletes", "IncurredPurchases")', { data: dataSubmit}, function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        show_stack_bottom_right('success', 'Xóa phát sinh tài sản', 'Xóa thành công.');
                    }
                    else {
                       @* show_stack_bottom_right('error', 'Xóa phát sinh mua/bán trái phiếu', 'Xóa thất bại.');*@
                        alert("Vui lòng chọn để xóa phát sinh tài sản!");
                    }
                });
            }
            else {
                alert("Vui lòng chọn để xóa phát sinh tài sản!");
            }
        });
    });

    function onDataBound(e) {
        $('#grid .k-grid-content').height(screen.height * 0.5);

        $('input[name="checkedNodes"]').each(function () {
            if (rowselected.indexOf(this.value) != -1) {
                $(this).attr('checked', 'checked');
            } else {
                $(this).removeAttr('checked');
            }
        });
    };
</script>

<div id="main">
    <div id="left"></div>
    <div class="container-fluid box-log">
        <div class="row" style="margin-left:-15px;">
            <div class=" col-sm-8 pr-0 ">
                <div class="pl-2 chart-cursor  pr-2">
                    <canvas id="lineChart"></canvas>
                </div>
            </div>
            <div class="col-sm-4 pl-0">
                <div class="row box-style">
                    <div class="col-sm-6 log-item">
                        <h2>Total Request</h2><br />
                        <strong class="color-bluemix">@Model.TotalRequest</strong>
                    </div>
                    <div class="col-sm-6 log-item">
                        <h2>Failed Request  </h2><br />
                        <strong class="color-red">@Model.FailedRequest</strong>
                    </div>
                </div>
                
            </div>
           

        </div>
        <div class="row log-content">
            <div class="col-sm-3 log-item">
                <h2>2xx Status Codes </h2><br />
                <strong class="color-green">@Model.TwoHundredStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>3xx Status Codes</h2><br />
                <strong class="color-blue">@Model.ThreeHundredStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>4xx Status Codes</h2><br />
                <strong class="color-yellow">@Model.FourHundredStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>5xx Status Codes</h2><br />
                <strong class="color-red">@Model.FiveHundredStatusCodes</strong>
            </div>
        </div>
        <div class="container-fluid">
            <div class="chart-content">
                <div class="row ">
                    <div class="col-sm-6 p-0">
                        <div class="chart-cursor">
                            <canvas id="topPaths"></canvas>
                        </div>
                    </div>
                    <div class="col-sm-6 p-0">
                        <div class="chart-cursor">
                            <canvas id="topClientIP"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="chart-content">
                <div class="row ">
                    <div class="col-sm-6 p-0">
                        <div class="chart-cursor">
                            <canvas id="topProtocolVersion"></canvas>
                        </div>
                    </div>
                    <div class="col-sm-6 p-0">
                        <div class="chart-cursor">
                            <canvas id="topHttpMethod"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row-fluid">
            <div class="span12">
                <div class="box">
                    <div class="box-content nopadding">
                        @(Html.Kendo().Grid<LogData>()
                                .Name("grid")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.ID).Title(Resources.Common.ID).HtmlAttributes(new { style = "text-align:center;" }).Hidden();
                                    columns.Bound(p => p.ID).Title(Resources.Common.ID).HtmlAttributes(new { style = "text-align:center;" }).Hidden();
                                    columns.Bound(p => p.date).Title("Thời gian").Format("{0:dd-MM-yyyy HH:mm:ss}").Width(400);
                                    columns.Bound(p => p.csMethod).Title("Phương thức HTTP").Width(200);
                                    columns.Bound(p => p.sPort).Title("Cổng máy chủ").Width(200);
                                    columns.Bound(p => p.csUsername).Title("Tên người dùng").Width(200);
                                    columns.Bound(p => p.cIp).Title("IP người dùng").Width(150);
                                    columns.Bound(p => p.csVersion).Title("Phiên bản HTTP").Width(300);
                                    columns.Bound(p => p.scStatus).Title("Mã trạng thái HTTP").Width(300);
                                    columns.Bound(p => p.scBytes).Title("Số byte gửi").Width(300);
                                    columns.Bound(p => p.csBytes).Title("Số byte nhận").Width(300);
                                    columns.Bound(p => p.timeTaken).Title("Thời gian thực hiện (ms)").Width(300);
                                })
                                .Pageable()
                                .Selectable(select => select.Mode(GridSelectionMode.Single))
                                .Sortable()
                                .Filterable()
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Model(model => model.Id(p => p.ID))
                                    .PageSize(20)
                                    .Read(read => read.Action("LogData_Read", "Home"))
                                    .ServerOperation(false)
                                 )
                                  .Events(events => events.DataBinding("binding_handler").DataBound("onDataBound"))
                        )


                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    //option
    var chartLineType = 'line';
    var chartBarType = 'bar';

    var options = { //option linechart
        responsive: true,
        maintainAspectRatio: false,
        scaleShowLabels: true,
        plugins: {
            legend: {
                display: false
            },
        },
        onHover: function (e) {
            const points = this.getElementsAtEventForMode(
                e,
                'index', { axis: 'x', intersect: true },
                false
            );

            if (points.length) e.native.target.style.cursor = 'pointer';
            else e.native.target.style.cursor = 'pointer';
        },
        animation: {
            easing: 'easeInOutQuad',
            duration: 400
        },
        interaction: {
            intersect: false,
        },
        scales: {
            xAxes: [{
                barPercentage: 0.1,
                gridLines: {
                    display: false
                }
            }],
            yAxes: [{
                gridLines: {
                    color: 'rgba(200, 200, 200, 0.08)',
                    lineWidth: 1
                },
                min: 0,
                ticks: {
                    beginAtZero: true
                }
            }],
            x: {
                grid: { display: false },
                ticks: {
                    autoSkip: true,
                    maxTicksLimit: 6
                },
                barPercentage: 0.1,
            },
            y: {
                grid: { display: false },
                min: 0,
            }
        },
        elements: {
            line: {
                tension: 0
            }
        },
        point: {
            backgroundColor: 'white'
        },
        legend: {
            onHover: function (e) {
                e.target.style.cursor = 'pointer';
            }
        },
        hover: {
            onHover: function (e) {
                var point = this.getElementAtEvent(e);
                if (point.length) e.target.style.cursor = 'pointer';
                else e.target.style.cursor = 'pointer';
            }
        },
        tooltips: {
            titleFontFamily: 'Open Sans',
            backgroundColor: 'rgba(0,0,0,0.3)',
            titleFontColor: 'red',
            caretSize: 5,
            cornerRadius: 2,
            xPadding: 10,
            yPadding: 10,
            callbacks: {
                title: function (tooltipItem, data) {
                    var title = "";
                    return title;
                },
                label: function (tooltipItem, data) {
                    return tooltipItem.xLabel;
                }
            }
        }
    };

    // line chart
    var xAxesLineChart = [];
    var yAxesLineChart = [];

    var xAxesBarChart = [];
    var yAxesBarChart = [];
@*    var xAxesDougnutChart = [];
    var yAxesDougnutChart = [];
    var zAxesDougnutChart = [];*@

    var xAxesTopPaths = [];
    var yAxesTopPaths = [];

    var xAxesClientIP = [];
    var yAxesClientIP = [];

    var xAxesProtocolVersion = [];
    var yAxesProtocolVersion = [];

    var xAxesHttpMethod = [];
    var yAxesHttpMethod = [];

    var ctxLineChart = document.getElementById('lineChart').getContext('2d');
@*    var ctxBarChart = document.getElementById('chart1').getContext('2d');*@
    var ctxTopPaths = document.getElementById('topPaths').getContext('2d');
    var ctxClientIP = document.getElementById('topClientIP').getContext('2d');
    var ctxProtocolVersion = document.getElementById('topProtocolVersion').getContext('2d');
    var ctxHttpMethod = document.getElementById('topHttpMethod').getContext('2d');

@*    var ctxDougnutChart = document.getElementById('chart1').getContext('2d');*@

    var gradient = ctxLineChart.createLinearGradient(0, 0, 0, 450);
    gradient.addColorStop(0, 'rgba(39, 174, 96, 0.2)');
    gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');

    var contractUserData = {
        labels: xAxesLineChart,
        datasets: [{
            label: 'Requests',
            fill: true,
            borderColor: "#2763c9",
            pointBorderColor: "#2763c9",
            pointBackgroundColor: "#FFFFFF",
            pointHoverBackgroundColor: "#2763c9",
            pointHoverBorderColor: "#2763c9",
            pointBorderWidth: 1,
            pointHoverRadius: 4,
            pointHoverBorderWidth: 1,
            pointRadius: 3,
            borderWidth: 2,
            borderRadius: 2,
            backgroundColor: "#FFFFFF",
            data: yAxesLineChart,
            barPercentage: 0.5,
            maxBarThickness: 100,
            tension: 0
        }]
    };

    var contractUser = new Chart(ctxLineChart, {
        type: chartLineType,
        data: contractUserData,
        options: options
    });

//create stack bar chart
@*    const dataBarChart = {
        labels: xAxesBarChart,
        datasets: yAxesBarChart,
        backgroundColor: yAxesBarChart.backgroundColor,
    };

    var barChart = new Chart(ctxBarChart, {
        type: chartBarType,
        data: dataBarChart,
        options: {
            scales: {
                xAxes: [{
                    stacked: true,
                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }],
                yAxes: [{
                    stacked: true,
                }]
            },
        }
    });*@

//create TopPaths bar chart
    const dataTopPathsBarChart = {
        labels: xAxesTopPaths,
        datasets: yAxesTopPaths

    };

    var topPathsChart = new Chart(ctxTopPaths, {
        type: chartBarType,
        data: dataTopPathsBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });

    //create ClientIP bar chart
    const dataClientIPBarChart = {
        labels: xAxesClientIP,
        datasets: yAxesClientIP

    };

    var clientIPChart = new Chart(ctxClientIP, {
        type: chartBarType,
        data: dataClientIPBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });

    //create ProtocolVersion bar chart
    const dataProtocolVersionBarChart = {
        labels: xAxesProtocolVersion,
        datasets: yAxesProtocolVersion

    };

    var protocolVersionChart = new Chart(ctxProtocolVersion, {
        type: chartBarType,
        data: dataProtocolVersionBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });

    //create HttpMethod bar chart
    const dataHttpMethodBarChart = {
        labels: xAxesHttpMethod,
        datasets: yAxesHttpMethod

    };

    var httpMethodChart = new Chart(ctxHttpMethod, {
        type: chartBarType,
        data: dataHttpMethodBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });

@*    const dataDougnutChart = {

        labels: xAxesDougnutChart,
        datasets: [{
            label: 'Phân bổ tài sản',
            data: yAxesDougnutChart,
            backgroundColor: zAxesDougnutChart,
        }]

    };

    var doughnutChart = new Chart(ctxDougnutChart, {
        type: chartBarType,
        data: dataDougnutChart,
        options: {
            plugins: {
                tooltip: {
                    enabled: true,
                    callbacks: {
                        footer: (ttItem) => {
                            let sum = 0;
                            let dataArr = ttItem[0].dataset.data;
                            dataArr.map(data => {
                                sum += Number(data);
                            });

                            let percentage = (ttItem[0].parsed * 100 / sum).toFixed(2) + '%';
                            return `Tỷ lệ: ${percentage}`;
                        }
                    }
                }
            }
        }

    });*@


    @* scales: {
        y: {
            ticks: {
                display: false
            },
            gridLines: {
                display: false
            },
            grid: {
                display: false
            }
        }
                , x: {
            ticks: {
                display: false
            },
            gridLines: {
                display: false
            },
            grid: {
                display: false
            }
        }


    },*@

    @*var x = 0;

    document.getElementById("chart1").onclick = clickHandler;

    function clickHandler(evt) {
        const points = doughnutChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);

        if (points.length) {
            const firstPoint = points[0];
            const label = doughnutChart.data.labels[firstPoint.index];
            //const value = doughnutChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            xAxesDougnutChart.splice(0, xAxesDougnutChart.length);
            yAxesDougnutChart.splice(0, yAxesDougnutChart.length);
            zAxesDougnutChart.splice(0, zAxesDougnutChart.length);

            //x=0 => detail ; x=1 => main
            if (x == 0) {
                $.ajax({
                    url: '@Url.Action("GetTotalMoneyUserDetail", "Home", new { area = "admin" })',
                    type: "get",
                    dataType: "json",
                    data: { label: label },
                    success: function (response) {
                        for (var i = 0; i < response.length; i++) {
                            xAxesDougnutChart.push(response[i].xAxes);
                            yAxesDougnutChart.push(response[i].yAxes);
                            zAxesDougnutChart.push(response[i].zAxes);
                        }
                        doughnutChart.update();
                        x = 1;
                    },
                    error: function (xhr) {
                    }
                });
            } else {
                 $.ajax({
                    url: '@Url.Action("GetTotalMoneyUser", "Home", new { area = "admin" })',
                    type: "get",
                    dataType: "json",
                    success: function (response) {
                        for (var i = 0; i < response.length; i++) {
                            xAxesDougnutChart.push(response[i].xAxes);
                            yAxesDougnutChart.push(response[i].yAxes);
                            zAxesDougnutChart.push(response[i].zAxes);
                        }
                        doughnutChart.update();
                        x = 0;
                    },
                    error: function (xhr) {
                    }
                });
            }

        }
    }*@



    $(document).ready(function () {
        readDataLineChart();
        @*readDataBarChart();*@
        readDataTopPathsChart();
        readDataClientIPChart();
        readDataProtocolVersionChart();
        readDataHttpMethodChart();
        //readDataDougnutChart();
    });

    function readDataLineChart() {
        xAxesLineChart.splice(0, xAxesLineChart.length);
        yAxesLineChart.splice(0, yAxesLineChart.length);

        $.ajax({
            url: '@Url.Action("GetPackageBuy", "Home", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.length; i++) {
                    xAxesLineChart.push(response[i].xAxes);
                    yAxesLineChart.push(response[i].yAxes);
                }

                contractUser.update();
            },
            error: function (xhr) {
            }
        });

    }

   function readDataBarChart() {
        xAxesBarChart.splice(0, xAxesBarChart.length);
        yAxesBarChart.splice(0, yAxesBarChart.length);

        $.ajax({
            url: '@Url.Action("GetDataRequest", "Home", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesBarChart.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.label = dataItem.label;
                    model.type = dataItem.type;
                    model.stack = dataItem.stack;
                    model.backgroundColor = dataItem.backgroundColor;

                    var data = [];
                    for (var j = 0; j < dataItem.data.length; j++) {
                        data.push(dataItem.data[j]);
                    }
                    model.data = data;

                    yAxesBarChart.push(model);
                }

                console.log(yAxesBarChart);
                barChart.update();
            },
            error: function (xhr) {
            }
        });


    }

    function readDataClientIPChart() {
        xAxesClientIP.splice(0, xAxesClientIP.length);
        yAxesClientIP.splice(0, yAxesClientIP.length);

        $.ajax({
            url: '@Url.Action("GetDataClientIP", "Home", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesClientIP.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesClientIP.push(model);
                }
                console.log(xAxesClientIP);
                console.log(yAxesClientIP);
                clientIPChart.update();

            },
            error: function (xhr) {
            }
        });


    }

    function readDataTopPathsChart() {
        xAxesTopPaths.splice(0, xAxesTopPaths.length);
        yAxesTopPaths.splice(0, yAxesTopPaths.length);
        $.ajax({
            url: '@Url.Action("GetDataTopPath", "Home", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesTopPaths.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesTopPaths.push(model);
                }
                console.log(xAxesTopPaths);
                console.log(yAxesTopPaths);
                topPathsChart.update();

            },
            error: function (xhr) {
            }
        });


    }

    function readDataProtocolVersionChart() {
        xAxesProtocolVersion.splice(0, xAxesProtocolVersion.length);
        yAxesProtocolVersion.splice(0, yAxesProtocolVersion.length);

        $.ajax({
            url: '@Url.Action("GetDataProtocolVersion", "Home", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesProtocolVersion.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesProtocolVersion.push(model);
                }
                console.log(xAxesProtocolVersion);
                console.log(yAxesProtocolVersion);
                protocolVersionChart.update();

            },
            error: function (xhr) {
            }
        });


    }

    function readDataHttpMethodChart() {
        xAxesHttpMethod.splice(0, xAxesHttpMethod.length);
        yAxesHttpMethod.splice(0, yAxesHttpMethod.length);

        $.ajax({
            url: '@Url.Action("GetDataHttpMethod", "Home", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesHttpMethod.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesHttpMethod.push(model);
                }
                console.log(xAxesClientIP);
                console.log(yAxesClientIP);
                httpMethodChart.update();

            },
            error: function (xhr) {
            }
        });


    }




  @* function readDataDougnutChart() {
        xAxesDougnutChart.splice(0, xAxesDougnutChart.length);
       yAxesDougnutChart.splice(0, yAxesDougnutChart.length);
       zAxesDougnutChart.splice(0, zAxesDougnutChart.length);


        $.ajax({
            url: '@Url.Action("GetTotalMoneyUser", "Home", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.length; i++) {
                    xAxesDougnutChart.push(response[i].xAxes);
                    yAxesDougnutChart.push(response[i].yAxes);
                    zAxesDougnutChart.push(response[i].zAxes);
                }
                doughnutChart.update();
            },
            error: function (xhr) {
            }
        });


    }*@
    function getDataFilter() {
        var dataSource = $("#grid").data("kendoGrid").dataSource;
        var filters = dataSource.filter();
        var allData = dataSource.data();
        var query = new kendo.data.Query(allData);
        var result = query.filter(filters).data;
        return result;
    }
    function getCheckAll() {
        var dataFilterID = [];
        var dataFilter = getDataFilter();
        var check;
        for (var i = 0; i < dataFilter.length; i++) {
            dataFilterID.push(String(dataFilter[i].ID));
        }
        for (var i = 0; i < dataFilterID.length; i++) {
            var index = rowselected.indexOf(dataFilterID[i]);
            if (index != -1) {
                check = true;
            }
            else {
                check = false;
                break;
            }
        }
        return check;
    }

    function childNodeClick(element) {
        var dataID = getCheckAll();
        var id = element.value;
        if (rowselected.indexOf(id) !== -1) {
            rowselected.splice(rowselected.indexOf(id), 1);
        } else {
            rowselected.push(id);
        }
        isCheckedAll = getCheckAll();
        $('#chkAll').prop('checked', isCheckedAll);
    }

    $(function () {
        $(".k-filter").click(function () {
            setTimeout(function () {
                $(".k-filter-menu .k-button").click(function () {
                    setTimeout(function () {
                        rowselected = [];
                        isCheckedAll = getCheckAll();
                        $('#chkAll').prop('checked', isCheckedAll);
                        $('input[name="checkedNodes"]').each(function () {
                            if (rowselected.indexOf(this.value) != -1) {
                                $(this).attr('checked', 'checked');
                            } else {
                                $(this).removeAttr('checked');
                            }
                        });
                    }, 10)
                })
            }, 100);
        });
    });

    function checkAll(e) {

        var rowItems = getDataFilter();
        isCheckedAll = $(e.target).prop('checked');
        if (isCheckedAll) {
            for (var i = 0; i < rowItems.length; i++) {
                var index = rowselected.indexOf(String(rowItems[i].ID));
                if (index == -1) {
                    rowselected.push(String(rowItems[i].ID));
                }
            }
        }
        else if (!isCheckedAll) {
            var dataFilterID = [];
            var dataFilter = getDataFilter();
            for (var i = 0; i < dataFilter.length; i++) {
                dataFilterID.push(String(dataFilter[i].ID));
            }
            for (var i = 0; i < dataFilterID.length; i++) {
                var index = rowselected.indexOf(dataFilterID[i]);
                if (index != -1) {
                    rowselected.splice(index, 1);
                }
            }
        }

        $('input[name="checkedNodes"]').each(function () {
            $(this).prop('checked', isCheckedAll);
        });
    }
</script>

