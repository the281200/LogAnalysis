@model ErrorsRequestStatusCode
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Phiên truy cập lỗi";

}
<script type="text/javascript">
    var rowselected = [];
    var isCheckedAll = false;

    function binding_handler(e) {
    }

   @* function changepassword_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/Customer/changepassword/?userName=" + dataItem.UserName);
    }*@

    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/edit/" + dataItem.ID);
    }

    function modules_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/ModulesMapping/" + dataItem.ID);

    }

    function sites_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/IncurredPurchases/AdminSitesMapping/" + dataItem.ID);
    }

    $(document).ready(function () {
        $("#btnadd").click(function () {
            opendlg("/admin/IncurredPurchases/add");
        });
        $("#btnedit").click(function () {
            var selected = [];
            $('input:checkbox[name=checkedNodes]').each(function () {
                if ($(this).is(':checked')) {
                    selected.push($(this).val());
                }
            });
            if (rowselected.length > 0) {
                opendlg("/admin/IncurredPurchases/edit/" + selected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });

        $("#btnundo").click(function () {
            opendlg("/admin/IncurredPurchases/Undo");
        });

        $("#btndelete").click(function () {
           var dataSource = $("#grid").data("kendoGrid").dataSource.data();
            var models = [];
            if (rowselected.length > 0) {
                for (var i = 0; i < rowselected.length; i++) {
                    for (var j = 0; j < dataSource.length; j++) {
                        var dataItem = dataSource[j];
                        if (dataItem.ID == rowselected[i]) {
                            models.push(dataItem.ID);
                        }
                    }
                }
                var dataSubmit = JSON.stringify(models);

                $.post('@Url.Action("Deletes", "IncurredPurchases")', { data: dataSubmit}, function (data) {
                    if (data.success) {
                        $("#grid").data("kendoGrid").dataSource.read();
                        show_stack_bottom_right('success', 'Xóa phát sinh tài sản', 'Xóa thành công.');
                    }
                    else {
                       @* show_stack_bottom_right('error', 'Xóa phát sinh mua/bán trái phiếu', 'Xóa thất bại.');*@
                        alert("Vui lòng chọn để xóa phát sinh tài sản!");
                    }
                });
            }
            else {
                alert("Vui lòng chọn để xóa phát sinh tài sản!");
            }
        });
    });

    function onDataBound(e) {
        $('#grid .k-grid-content').height(screen.height * 0.5);

        $('input[name="checkedNodes"]').each(function () {
            if (rowselected.indexOf(this.value) != -1) {
                $(this).attr('checked', 'checked');
            } else {
                $(this).removeAttr('checked');
            }
        });
    };
</script>
<div id="main">
    <div id="left"></div>
    <div class="container-fluid box-log">
        <div class="row log-content">
            <div class="col-sm-3 log-item">
                <h2>Failed Request</h2><br />
                <strong class="color-green"> @Model.FailedRequest</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>4xx Status Codes </h2><br />
                <strong class="color-blue">@Model.FourHundredStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>5xx Status Codes </h2><br />
                <strong class="color-yellow">@Model.FiveHundredStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>Bad Request Status Codes </h2><br />
                <strong class="color-red">@Model.BadRequestStatusCodes</strong>
            </div>
        </div>
        <div class="row log-content">
            <div class="col-sm-3 log-item">
                <h2>Unauthorized Status Codes </h2><br />
                <strong class="color-red">@Model.UnauthorizedStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>Forbiden Status Codes </h2><br />
                <strong class="color-yellow">@Model.ForbidenStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>NotFound Status Codes </h2><br />
                <strong class="color-bluemix">@Model.NotFoundStatusCodes</strong>
            </div>
            <div class="col-sm-3 log-item">
                <h2>Internal Server Error Status Codes </h2><br />
                <strong class="color-green">@Model.InternalServerErrorStatusCodes</strong>
            </div>
        </div>
        <div class="row log-content">
            <div class="col-sm-4 log-item">
                <h2>Bad Gateway Status Codes </h2><br />
                <strong class="color-bluemix">@Model.BadGatewayStatusCodes</strong>
            </div>
            <div class="col-sm-4 log-item">
                <h2>Service Unavailable Status Codes </h2><br />
                <strong class="color-green">@Model.ServiceUnavailableStatusCodes</strong>
            </div>
            <div class="col-sm-4 log-item">
                <h2>Gateway Timeout Status Codes </h2><br />
                <strong class="color-red">@Model.GatewayTimeoutStatusCodes</strong>
            </div>
        </div>

        <div class="container-fluid">
            <div class="chart-content">
                <div class="row ">
                    @*                    <div class="col-sm-4 p-0">
                        <div class="chart-cursor">
                            <canvas id="chart1"></canvas>
                        </div>
                    </div>*@
                    <div class="col-sm-6 p-0">

                        <div class="chart-cursor">
                            <div class="text-chart">Top Paths</div>
                            <canvas id="topPaths"></canvas>
                        </div>
                    </div>
                    <div class="col-sm-6 p-0">
                        <div class="chart-cursor">
                            <div class="text-chart">Top Client IP</div>
                            <canvas id="topClientIP"></canvas>
                        </div>
                    </div>

                </div>
            </div>
            <div class="chart-content">
                <div class="row ">
                    <div class="col-sm-6 p-0">
                        <div class="chart-cursor">
                            <div class="text-chart">Top Protocol Version</div>
                            <canvas id="topProtocolVersion"></canvas>
                        </div>
                    </div>
                    <div class="col-sm-6 p-0">

                        <div class="chart-cursor">
                            <div class="text-chart">Top Http Method</div>
                            <canvas id="topHttpMethod"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container-fluid box-grid">
            <div class="">
                <div class="box">
                    <div class="box-content nopadding">
                        @(Html.Kendo().Grid<LogData>()
                                .Name("grid")
                                .Columns(columns =>
                                {
                                    columns.Bound(p => p.ID).Title(Resources.Common.ID).HtmlAttributes(new { style = "text-align:center;" }).Hidden();
                                    columns.Bound(p => p.ID).Title(Resources.Common.ID).HtmlAttributes(new { style = "text-align:center;" }).Hidden();
                                    columns.Bound(p => p.date).Title("Thời gian").Format("{0:dd-MM-yyyy HH:mm:ss}").Width(400);
                                    columns.Bound(p => p.csMethod).Title("Phương thức HTTP").Width(200);
                                    columns.Bound(p => p.cIp).Title("IP người dùng").Width(150);
                                    columns.Bound(p => p.csVersion).Title("Phiên bản HTTP").Width(300);
                                    columns.Bound(p => p.scStatus).Title("Mã trạng thái HTTP").Width(300);
                                    columns.Bound(p => p.scBytes).Title("Số byte gửi").Width(300);
                                    columns.Bound(p => p.csBytes).Title("Số byte nhận").Width(300);
                                    columns.Bound(p => p.timeTaken).Title("Thời gian thực hiện (ms)").Width(300);
                                })
                                .Pageable()
                                .Selectable(select => select.Mode(GridSelectionMode.Single))
                                .Sortable()
                                .Filterable()
                                .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .Model(model => model.Id(p => p.ID))
                                    .PageSize(20)
                                    .Read(read => read.Action("ErrorData_Read", "ErrorRequest"))
                                    .ServerOperation(false)
                                 )
                                  .Events(events => events.DataBinding("binding_handler").DataBound("onDataBound"))
                        )


                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
<script>
    //option

    var chartBarType = 'bar';





    var xAxesBarChart = [];
    var yAxesBarChart = [];


    var xAxesTopPaths = [];
    var yAxesTopPaths = [];

    var xAxesClientIP = [];
    var yAxesClientIP = [];

    var xAxesProtocolVersion = [];
    var yAxesProtocolVersion = [];

    var xAxesHttpMethod = [];
    var yAxesHttpMethod = [];


@*    var ctxBarChart = document.getElementById('chart1').getContext('2d');*@
    var ctxTopPaths = document.getElementById('topPaths').getContext('2d');
    var ctxClientIP = document.getElementById('topClientIP').getContext('2d');
    var ctxProtocolVersion = document.getElementById('topProtocolVersion').getContext('2d');
    var ctxHttpMethod = document.getElementById('topHttpMethod').getContext('2d');



//create stack bar chart
@*    const dataBarChart = {
        labels: xAxesBarChart,
        datasets: yAxesBarChart,
        backgroundColor: yAxesBarChart.backgroundColor,
    };

    var barChart = new Chart(ctxBarChart, {
        type: chartBarType,
        data: dataBarChart,
        options: {
            scales: {
                xAxes: [{
                    stacked: true,
                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }],
                yAxes: [{
                    stacked: true,
                }]
            },
        }
    });*@

//create TopPaths bar chart
    const dataTopPathsBarChart = {
        labels: xAxesTopPaths,
        datasets: yAxesTopPaths

    };

    var topPathsChart = new Chart(ctxTopPaths, {
        type: chartBarType,
        data: dataTopPathsBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });

    //create ClientIP bar chart
    const dataClientIPBarChart = {
        labels: xAxesClientIP,
        datasets: yAxesClientIP

    };

    var clientIPChart = new Chart(ctxClientIP, {
        type: chartBarType,
        data: dataClientIPBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });

    //create ProtocolVersion bar chart
    const dataProtocolVersionBarChart = {
        labels: xAxesProtocolVersion,
        datasets: yAxesProtocolVersion

    };

    var protocolVersionChart = new Chart(ctxProtocolVersion, {
        type: chartBarType,
        data: dataProtocolVersionBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });

    //create HttpMethod bar chart
    const dataHttpMethodBarChart = {
        labels: xAxesHttpMethod,
        datasets: yAxesHttpMethod

    };

    var httpMethodChart = new Chart(ctxHttpMethod, {
        type: chartBarType,
        data: dataHttpMethodBarChart,
        options: {
            indexAxis: 'y',
            scales: {
                xAxes: [{

                    ticks: {
                        beginAtZero: true,
                        maxRotation: 0,
                        minRotation: 0
                    }
                }]

            },
            labels: {
                display: false
            }
        }
    });




    $(document).ready(function () {

@*        readDataBarChart();*@
        readDataTopPathsChart();
        readDataClientIPChart();
        readDataProtocolVersionChart();
        readDataHttpMethodChart();

    });



@*   function readDataBarChart() {
        xAxesBarChart.splice(0, xAxesBarChart.length);
        yAxesBarChart.splice(0, yAxesBarChart.length);

        $.ajax({
            url: '@Url.Action("GetDataRequest", "ErrorRequest", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesBarChart.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.label = dataItem.label;
                    model.type = dataItem.type;
                    model.stack = dataItem.stack;
                    model.backgroundColor = dataItem.backgroundColor;

                    var data = [];
                    for (var j = 0; j < dataItem.data.length; j++) {
                        data.push(dataItem.data[j]);
                    }
                    model.data = data;

                    yAxesBarChart.push(model);
                }

                console.log(yAxesBarChart);
                barChart.update();
            },
            error: function (xhr) {
            }
        });


    }*@

    function readDataClientIPChart() {
        xAxesClientIP.splice(0, xAxesClientIP.length);
        yAxesClientIP.splice(0, yAxesClientIP.length);

        $.ajax({
            url: '@Url.Action("GetDataClientIP", "ErrorRequest", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesClientIP.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesClientIP.push(model);
                }
                console.log(xAxesClientIP);
                console.log(yAxesClientIP);
                clientIPChart.update();

            },
            error: function (xhr) {
            }
        });


    }

    function readDataTopPathsChart() {
        xAxesTopPaths.splice(0, xAxesTopPaths.length);
        yAxesTopPaths.splice(0, yAxesTopPaths.length);
        $.ajax({
            url: '@Url.Action("GetDataTopPath", "ErrorRequest", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesTopPaths.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesTopPaths.push(model);
                }
                console.log(xAxesTopPaths);
                console.log(yAxesTopPaths);
                topPathsChart.update();

            },
            error: function (xhr) {
            }
        });


    }

    function readDataProtocolVersionChart() {
        xAxesProtocolVersion.splice(0, xAxesProtocolVersion.length);
        yAxesProtocolVersion.splice(0, yAxesProtocolVersion.length);

        $.ajax({
            url: '@Url.Action("GetDataProtocolVersion", "ErrorRequest", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesProtocolVersion.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesProtocolVersion.push(model);
                }
                console.log(xAxesProtocolVersion);
                console.log(yAxesProtocolVersion);
                protocolVersionChart.update();

            },
            error: function (xhr) {
            }
        });


    }

    function readDataHttpMethodChart() {
        xAxesHttpMethod.splice(0, xAxesHttpMethod.length);
        yAxesHttpMethod.splice(0, yAxesHttpMethod.length);

        $.ajax({
            url: '@Url.Action("GetDataHttpMethod", "ErrorRequest", new { area = "admin" })',
            type: "get",
            dataType: "json",
            success: function (response) {
                for (var i = 0; i < response.xAxes.length; i++) {
                    xAxesHttpMethod.push(response.xAxes[i]);
                }

                for (var i = 0; i < response.yAxes.length; i++) {
                    var dataItem = response.yAxes[i];
                    var model = {};
                    model.axis = dataItem.axis;
                    model.fill = dataItem.fill;
                    model.borderWidth = dataItem.borderWidth;
                    model.data = dataItem.data;
                    model.backgroundColor = dataItem.backgroundColor;
                    yAxesHttpMethod.push(model);
                }
                console.log(xAxesClientIP);
                console.log(yAxesClientIP);
                httpMethodChart.update();

            },
            error: function (xhr) {
            }
        });


    }

    function getDataFilter() {
        var dataSource = $("#grid").data("kendoGrid").dataSource;
        var filters = dataSource.filter();
        var allData = dataSource.data();
        var query = new kendo.data.Query(allData);
        var result = query.filter(filters).data;
        return result;
    }
    function getCheckAll() {
        var dataFilterID = [];
        var dataFilter = getDataFilter();
        var check;
        for (var i = 0; i < dataFilter.length; i++) {
            dataFilterID.push(String(dataFilter[i].ID));
        }
        for (var i = 0; i < dataFilterID.length; i++) {
            var index = rowselected.indexOf(dataFilterID[i]);
            if (index != -1) {
                check = true;
            }
            else {
                check = false;
                break;
            }
        }
        return check;
    }

    function childNodeClick(element) {
        var dataID = getCheckAll();
        var id = element.value;
        if (rowselected.indexOf(id) !== -1) {
            rowselected.splice(rowselected.indexOf(id), 1);
        } else {
            rowselected.push(id);
        }
        isCheckedAll = getCheckAll();
        $('#chkAll').prop('checked', isCheckedAll);
    }

    $(function () {
        $(".k-filter").click(function () {
            setTimeout(function () {
                $(".k-filter-menu .k-button").click(function () {
                    setTimeout(function () {
                        rowselected = [];
                        isCheckedAll = getCheckAll();
                        $('#chkAll').prop('checked', isCheckedAll);
                        $('input[name="checkedNodes"]').each(function () {
                            if (rowselected.indexOf(this.value) != -1) {
                                $(this).attr('checked', 'checked');
                            } else {
                                $(this).removeAttr('checked');
                            }
                        });
                    }, 10)
                })
            }, 100);
        });
    });

    function checkAll(e) {

        var rowItems = getDataFilter();
        isCheckedAll = $(e.target).prop('checked');
        if (isCheckedAll) {
            for (var i = 0; i < rowItems.length; i++) {
                var index = rowselected.indexOf(String(rowItems[i].ID));
                if (index == -1) {
                    rowselected.push(String(rowItems[i].ID));
                }
            }
        }
        else if (!isCheckedAll) {
            var dataFilterID = [];
            var dataFilter = getDataFilter();
            for (var i = 0; i < dataFilter.length; i++) {
                dataFilterID.push(String(dataFilter[i].ID));
            }
            for (var i = 0; i < dataFilterID.length; i++) {
                var index = rowselected.indexOf(dataFilterID[i]);
                if (index != -1) {
                    rowselected.splice(index, 1);
                }
            }
        }

        $('input[name="checkedNodes"]').each(function () {
            $(this).prop('checked', isCheckedAll);
        });
    }

</script>
