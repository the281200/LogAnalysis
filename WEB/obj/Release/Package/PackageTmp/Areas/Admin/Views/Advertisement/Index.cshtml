@{
    WebContext db = new WebContext();
    var webModuleId = 82; // Quảng cáo

    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId);
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModuleID == webModuleId);
}
<div id="main">
    <div class="container-fluid">
        <div class="page-header">
            <div class="pull-left">
                <div class="breadcrumbs"></div>
            </div>
            <div class="pull-right">
                <ul class="actions">
                    @if (roleWebModule != null && roleWebModule.Add.HasValue && roleWebModule.Add.Value)
                    {
                        <li>
                            <a href="javascript:void(0)" id="btnadd" class="btn btn-mini  btn-blue btn-inverse"><i class="icon-plus"></i> @Resources.Common.Add  </a>
                        </li>
                    }

                    @if (roleWebModule != null && roleWebModule.Edit.HasValue && roleWebModule.Edit.Value)
                    {
                        <li>
                            <a href="javascript:void(0)" id="btnedit" class="btn btn-mini   btn-blue btn-inverse"><i class="icon-edit"></i> @Resources.Common.Edit  </a>
                        </li>
                    }

                    @if (roleWebModule != null && roleWebModule.Delete.HasValue && roleWebModule.Delete.Value)
                    {
                        <li>
                            <a href="javascript:void(0)" id="btndelete" class="btn btn-mini  btn-red btn-inverse"><i class="icon-trash"></i> @Resources.Common.Delete  </a>
                        </li>
                    }
                </ul>
            </div>
        </div>


        <div class="row-fluid">
            <div class="span12">
                <div class="box">
                    <div class="box-content nopadding">
                        @(Html.Kendo().Grid<Advertisement>()
                                    .Name("grid")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(p=> p.ID).Title(Resources.Common.ID).Width(50);
                                        columns.Bound(p => p.Title).Title(Resources.Common.Title);
                                        columns.Bound(p => p.StatusText).Title("Trạng thái");
                                        columns.Bound(p => p.Link).Title(Resources.Common.Link);
                                        columns.Bound(p => p.Position).Title(Resources.Common.Position);
                                        columns.Bound(p => p.Culture).Title(Resources.Common.Language);
                                        columns.Command(command =>
                                        {
                                            if (roleWebModule != null && roleWebModule.Edit.HasValue && roleWebModule.Edit.Value)
                                            {
                                                command.Custom(Resources.Common.Edit).Click("edit_handler");
                                            }
                                            if (roleWebModule != null && roleWebModule.Delete.HasValue && roleWebModule.Delete.Value)
                                            {
                                                command.Custom(Resources.Common.Delete).Click("delete_handler");
                                            }
                                            if (roleWebModule != null && roleWebModule.Approve.HasValue && roleWebModule.Approve.Value)
                                            {
                                                command.Custom("Duyệt").Click("approve_handler");
                                            }
                                        }).Width(160).HtmlAttributes(new { style = "text-align:center;" });
                                    })
                                    .Selectable(select => select.Mode(Kendo.Mvc.UI.GridSelectionMode.Multiple))
                                    .Sortable().Filterable().Events(e => e.DataBound("dataBound")).Groupable()
                                    .DataSource(dataSource => dataSource
                                        .Ajax()
                                        .Model(model => model.Id(p=> p.ID))
                                                        .Read(read => read.Action("Advertisement_Read", "Advertisement")).Group(x => x.Add("Position", typeof(string))).Group(x => x.Add("Culture", typeof(string)))
                                     )
                                     .Events(events => events.Change("change_handler").DataBinding("binding_handler"))
                        )
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<script type="text/javascript">
    function dataBound(e) {
        var groupedData = this.dataSource.data();
        var data = [];

        //enumerate the groups and grab the actual items
        for (var i = 0; i < groupedData.length; i++) {
            for (var j = 0; j < groupedData[i].items.length; j++) {
                for (var k = 0; k < groupedData[i].items[j].items.length; k++) {
                    data.push(groupedData[i].items[j].items[k]);
                }
            }
        }
        
        for (var i = 0; i < data.length; i++) {
            var uid = data[i].uid;
            var row = this.table.find("tr[data-uid='" + uid + "']");
            if (data[i].StatusText == 'Đã phát hành') {
                $(row).find('.k-grid-Duyệt').text('Hạ bài');
            }
        }
    }   

    function approve_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/advertisement/approve/" + dataItem.ID);
    }

    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/advertisement/delete/" + dataItem.ID);
    }
    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/advertisement/edit/" + dataItem.ID);
    }
    var rowselected = [];
    function change_handler(e) {
        rowselected = [];
        var len = this.select().length;
        for (i = 0; i < len; i++) {
            rowselected.push(this.dataItem(this.select()[i]).ID);
        }
    }
    function binding_handler(e) {
        rowselected = [];
    }
    $(document).ready(function () {
        $("#btnadd").click(function () {
            opendlg("/admin/advertisement/add/");
        });

        $("#btnedit").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/advertisement/edit/" + rowselected[0]);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });

        $("#btndelete").click(function () {
            if (rowselected.length > 0) {
                opendlg("/admin/advertisement/deletes/" + rowselected);
            } else {
                alert("Không có khoản mục nào được chọn.");
            }
        });
        $("#btnrefresh").click(function () {
            $("#grid").data("kendoGrid").dataSource.read();
        });
    });
</script>
